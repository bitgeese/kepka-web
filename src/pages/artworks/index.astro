---
import MainLayout from "../../layouts/MainLayout.astro";
import { getAssetUrl } from "../../lib/directus";
import { CloudinaryImage } from "../../components/ui/CloudinaryImage";
import directus from "../../lib/directus";
import { readItems, readSingleton } from "@directus/sdk";

// Artwork type definition
interface Artwork {
  id?: string;
  title: string;
  description?: string;
  date_created: string;
  slug: string;
  cover: string;
  images?: string[];
  sort?: number;
}

// Fetch all artworks
const artworks = await directus.request(
  readItems('kepka_artworks', {
    fields: ['*'],
    sort: ['sort'],
    limit: 100,
  })
) as Artwork[];

// Fetch Kepka global settings to get paintings_cover
const kepkaData = await directus.request(
  readSingleton('kepka')
);

const paintingsCover = kepkaData.paintings_cover;

// Page title
const pageTitle = "Artworks | Jakub Kepka";

// Format function for dates with proper type
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long'
  });
};

// Assign sizes to artworks in an interesting pattern
// This creates a more dynamic, asymmetric layout
const getSizeClass = (index: number) => {
  const pattern = index % 8;
  
  switch (pattern) {
    // Most items are 1 column, with occasional 2-column items
    case 0: return "col-span-1"; // Standard
    case 3: return "col-span-2"; // Wide
    case 6: return "col-span-2"; // Wide
    default: return "col-span-1"; // Standard
  }
};
---

<MainLayout title={pageTitle}>
  <main>
    <!-- Masthead with Kepka paintings_cover image -->
    <section class="py-24 bg-black text-white relative overflow-hidden">
      {paintingsCover && (
        <div class="absolute inset-0 z-0 opacity-30">
          <CloudinaryImage
            publicId={getAssetUrl(paintingsCover)}
            alt="Artworks Cover"
            className="w-full h-full object-cover object-top"
            crop="scale"
            gravity="auto"
            fallback={getAssetUrl(paintingsCover)}
            client:load
          />
        </div>
      )}
      <div class="container mx-auto px-6 lg:px-16 relative z-10">
        <h1 class="text-6xl md:text-8xl font-display font-bold tracking-tight mb-4">
          ARTWORKS
        </h1>
        <a 
          href="/" 
          class="inline-flex items-center gap-2 text-sm text-white/80 hover:text-white transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          Back to home
        </a>
      </div>
    </section>
    
    <!-- Artworks grid -->
    {artworks.length === 0 ? (
      <div class="container mx-auto px-6 lg:px-16 py-24 text-center">
        <p class="text-xl text-muted-foreground">No artworks available at the moment.</p>
      </div>
    ) : (
      <div class="container max-w-5xl mx-auto px-6 lg:px-8 py-24">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-16 gap-y-40">
          {artworks.map((artwork: Artwork) => {
            const thumbnailImage = artwork.cover || null;
            
            return (
              <div class="group artwork-item">
                <a 
                  href={`/artworks/${artwork.slug}`} 
                  class="block"
                >
                  <figure class="mb-6 overflow-hidden">
                    {artwork.images && artwork.images.length > 0 ? (
                      <CloudinaryImage
                        publicId={getAssetUrl(artwork.images[0])}
                        alt={artwork.title}
                        className="w-full aspect-square object-contain transition-all duration-700 group-hover:scale-102"
                        grayscale={false}
                        crop="scale"
                        gravity="center"
                        fallback={getAssetUrl(artwork.images[0])}
                        client:load
                      />
                    ) : thumbnailImage ? (
                      <CloudinaryImage
                        publicId={getAssetUrl(thumbnailImage)}
                        alt={artwork.title}
                        className="w-full aspect-square object-contain transition-all duration-700 group-hover:scale-102"
                        grayscale={false}
                        crop="scale"
                        gravity="center"
                        fallback={getAssetUrl(thumbnailImage)}
                        client:load
                      />
                    ) : (
                      <div class="w-full aspect-square bg-muted flex items-center justify-center">
                        <span class="text-muted-foreground">No image</span>
                      </div>
                    )}
                  </figure>
                  
                  <figcaption class="px-1">
                    <h2 class="text-base font-medium tracking-tight mb-1 group-hover:text-electric-red transition-colors">
                      {artwork.title}
                    </h2>
                    
                    <time class="text-xs text-muted-foreground block" datetime={artwork.date_created}>
                      {formatDate(artwork.date_created)}
                    </time>
                  </figcaption>
                </a>
              </div>
            );
          })}
        </div>
      </div>
    )}
  </main>
</MainLayout>

<style>
  /* Museum-like styling */
  .artwork-item {
    position: relative;
  }
  
  .artwork-item figure {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }
  
  .artwork-item:hover figure {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
  }
  
  /* More breathing space on large screens */
  @media (min-width: 1280px) {
    .grid {
      gap-y: 60px;
      gap-x: 80px;
    }
  }
</style>
