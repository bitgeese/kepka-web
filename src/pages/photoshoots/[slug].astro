---
import MainLayout from '../../layouts/MainLayout.astro';
import { CloudinaryImage } from '../../components/ui/CloudinaryImage';
import { Lightbox } from '../../components/ui/Lightbox';
import { fetchPhotoshoots, fetchPhotoshootBySlug, getAssetUrl } from '../../lib/directus';
import { marked } from 'marked';

// The Photoshoot type isn't exported directly, recreate it here
interface Photoshoot {
  id?: string;
  slug: string;
  title: string;
  description: string;
  date_created: string;
  cover: string | { directus_files_id: string } | null;
  images: Array<string | { directus_files_id: string }>;
  products?: any[]; // Added products relationship
}

export async function getStaticPaths() {
  // Fetch all photoshoots for static path generation
  const photoshoots = await fetchPhotoshoots(100);
  
  // Return photoshoot slugs for path generation (we'll fetch full data in the route)
  return photoshoots.map((photoshoot: any) => ({
    params: { slug: photoshoot.slug },
  }));
}

// Get the slug from params
const { slug } = Astro.params;

// Fetch the photoshoot with full product data using our enhanced function
const photoshoot = await fetchPhotoshootBySlug(slug as string);

// Format the date
const formattedDate = photoshoot ? new Date(photoshoot.date_created).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}) : '';

// Convert image IDs to full URLs for the lightbox using our helper function
const imageUrls = photoshoot?.images 
  ? photoshoot.images.map((image: any) => getAssetUrl(image))
  : [];

// Check if the photoshoot has associated products
const hasProducts = photoshoot?.products && photoshoot.products.length > 0;
---

<MainLayout title={photoshoot?.title || 'Photoshoot'}>
  <main class="bg-white dark:bg-black py-12">
    <div class="container mx-auto px-6 lg:px-16">
      {photoshoot && (
        <>
          <div class="mb-16">
            <h1 class="text-4xl font-display font-bold tracking-tighter mb-4">
              {photoshoot.title}
            </h1>
            <a 
              href="/photoshoots" 
              class="inline-flex items-center gap-2 text-sm hover:text-electric-red transition-colors mb-4"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
              </svg>
              Back to all photoshoots
            </a>
            <time class="text-sm opacity-75 block mb-4" datetime={photoshoot.date_created}>
              {formattedDate}
            </time>
            
            {photoshoot.description && (
              <div class="prose prose-lg max-w-none mt-8" set:html={marked.parse(photoshoot.description)} />
            )}
          </div>
          
          {/* Photo grid */}
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {photoshoot.images.map((image: any, index: number) => (
              <div 
                class="overflow-hidden cursor-pointer transition-transform duration-300 hover:shadow-lg"
                onclick={`window.openLightbox(${index})`}
              >
                <CloudinaryImage 
                  publicId={getAssetUrl(image)} 
                  alt={`${photoshoot.title} - Photo ${index + 1}`}
                  className="w-full h-full object-contain object-center aspect-square transition-all duration-500"
                  grayscale={false}
                  quality={85}
                  crop="scale"
                  width={800}
                  loading={index < 6 ? "eager" : "lazy"}
                  fallback={getAssetUrl(image)}
                  client:load
                />
              </div>
            ))}
          </div>
          
          {/* Products from this fashion show */}
          {(() => {
            // Check if the photoshoot has associated products
            if (!photoshoot?.products || photoshoot.products.length === 0) {
              return null;
            }
            
            return (
              <div class="mt-20 pt-12 border-t border-gray-200 dark:border-gray-800">
                <h2 class="text-2xl md:text-3xl font-display font-bold tracking-tighter mb-8">
                  Items from this Collection
                </h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                  {photoshoot.products.map((product: any) => (
                    <a href={`/shop/${product.slug}`} class="group">
                      <div class="overflow-hidden mb-4 aspect-square">
                        {product.images && product.images.length > 0 && (
                          <CloudinaryImage 
                            publicId={getAssetUrl(product.images[0])} 
                            alt={product.title}
                            className="w-full h-full object-contain object-center transition-transform duration-500 group-hover:scale-105"
                            grayscale={false}
                            quality={80}
                            width={400}
                            loading="lazy"
                            fallback={getAssetUrl(product.images[0])}
                            client:load
                          />
                        )}
                      </div>
                      <h3 class="text-lg font-medium mb-2">{product.title}</h3>
                      <p class="text-base font-medium">
                        {product.price
                          ? new Intl.NumberFormat('en-US', {
                              style: 'currency',
                              currency: 'PLN',
                            }).format(Number(product.price))
                          : ''}
                      </p>
                    </a>
                  ))}
                </div>
              </div>
            );
          })()}
        </>
      )}
      {!photoshoot && (
        <div class="py-20 text-center">
          <h1 class="text-2xl font-bold mb-4">Photoshoot not found</h1>
          <p class="mb-8">The photoshoot you're looking for doesn't exist or has been removed.</p>
          <a href="/photoshoots" class="inline-block py-2 px-4 bg-black dark:bg-white text-white dark:text-black font-medium">
            Return to Photoshoots
          </a>
        </div>
      )}
    </div>
  </main>

  {/* Lightbox component */}
  <Lightbox images={imageUrls} client:load />
</MainLayout>

<script>
  // Add a small zoom effect on hover
  document.addEventListener('DOMContentLoaded', () => {
    const imageContainers = document.querySelectorAll('.cursor-pointer');
    imageContainers.forEach(container => {
      container.addEventListener('mouseenter', () => {
        container.classList.add('scale-[1.02]');
      });
      container.addEventListener('mouseleave', () => {
        container.classList.remove('scale-[1.02]');
      });
    });
  });
</script> 