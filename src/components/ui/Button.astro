---
export interface Props {
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'link';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  disabled?: boolean;
  loading?: boolean;
  icon?: string;
  iconPosition?: 'left' | 'right';
  href?: string;
  target?: '_blank' | '_self' | '_parent' | '_top';
  rel?: string;
}

const {
  type = 'button',
  class: className = '',
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  href,
  target,
  rel,
} = Astro.props;

// Determine if we should render a button or an anchor
const Tag = href && !disabled ? 'a' : 'button';

// Base classes
const baseClasses = 'inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2';

// Size classes
const sizeClasses = {
  sm: 'text-sm h-8 px-3 py-1 rounded',
  md: 'text-base h-10 px-4 py-2 rounded-md',
  lg: 'text-lg h-12 px-6 py-3 rounded-lg',
}[size];

// Variant classes
const variantClasses = {
  primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
  secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
  outline: 'bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500',
  ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-gray-500',
  link: 'bg-transparent text-primary-600 hover:underline focus:ring-primary-500 px-0 py-0 h-auto',
}[variant];

// State classes
const stateClasses = [
  disabled ? 'opacity-50 cursor-not-allowed' : '',
  fullWidth ? 'w-full' : '',
].filter(Boolean).join(' ');

// Combine all classes
const classes = [
  baseClasses,
  sizeClasses,
  variantClasses,
  stateClasses,
  className,
].filter(Boolean).join(' ');

// Prepare attributes based on tag type
const attrs = Tag === 'a' 
  ? { href, target, rel: target === '_blank' ? 'noopener noreferrer' : rel, class: classes } 
  : { type, disabled: disabled || loading, class: classes };
---

<Tag {...attrs}>
  {loading && (
    <svg class="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  )}
  
  {icon && iconPosition === 'left' && !loading && (
    <i class={`${icon} mr-2`}></i>
  )}
  
  <slot />
  
  {icon && iconPosition === 'right' && (
    <i class={`${icon} ml-2`}></i>
  )}
</Tag> 